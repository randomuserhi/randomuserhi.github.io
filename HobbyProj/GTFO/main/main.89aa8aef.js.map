{"mappings":"AAAAA,IAAIC,OAAOD,IAAIE,OAAO,CAAEC,MAAO,IAAIC,MAC/BC,KAAM,aAAcC,KAAM,CAAC,YAAa,YACxCC,SAAU,WACN,IAAIP,IAAEA,GAAQQ,OAAOR,IAAIS,QAAQD,OAAQE,MACrCC,EAAY,IAAIC,IACV,CACN,IAAIC,EAAM,IAAIC,MACdD,EAAIE,IAAM,iCACVJ,EAAUK,IAAI,aAAcH,GAEhC,IAAII,EAAc,aAElBA,EAAYC,UAAUC,KAAO,SAAUC,EAAMC,EAAOC,GAIhD,GAHAZ,KAAKL,KAAKkB,UAAYH,EAAKf,KAC3BK,KAAKc,MAAMD,UAAYvB,EAAIyB,OAAOL,EAAKM,SAAW,SAAW,SAC7DhB,KAAKiB,KAAKZ,IAAMf,EAAIyB,OAAOL,EAAKQ,aAAW,gBAAoBR,EAAKQ,mBAAqB,GACrF5B,EAAIyB,OAAOL,EAAKM,SAAU,CAC1B,IAAIG,EAASP,EAAOQ,WAAWC,IAAIX,EAAKM,SACxChB,KAAKmB,OAAON,UAAYvB,EAAIyB,OAAOI,GAAUA,EAAOxB,KAAO,GAE/D,IAAI2B,EAAS,EACb,IAAK,IAAIC,KAAKb,EAAKc,MAAO,CAEtBF,GADWZ,EAAKc,MAAMD,GACPD,OAEnBtB,KAAKsB,OAAOT,UAAS,GAAMS,EAAOG,QAAQ,KAC3B,IAAXH,IACAtB,KAAK0B,MAAMC,QAAU,QAEzB,IAAIC,EAAW,IAAIC,iBACT,CACN,IAAIC,EAAOC,SAASC,cAAc,MAC9BC,EAAOF,SAASC,cAAc,MAClCC,EAAKP,MAAMQ,cAAgB,SAC3B,IAAIC,EAAOJ,SAASC,cAAc,MAClCG,EAAKT,MAAMU,YAAc,OACzBD,EAAKT,MAAMQ,cAAgB,SAC3B,IAAIG,EAAON,SAASC,cAAc,MAClCK,EAAKX,MAAMU,YAAc,OACzBC,EAAKX,MAAMQ,cAAgB,SAC3BD,EAAKpB,UAAS,gBACdsB,EAAKtB,UAAS,cACdwB,EAAKxB,UAAS,gBACdiB,EAAKQ,OAAOL,EAAME,EAAME,GACxBT,EAASU,OAAOR,GAEpB,IAAK,IAAIS,KAAK7B,EAAKc,MAAO,CACtB,IAAIP,EAAOP,EAAKc,MAAMe,GAClBpB,EAASP,EAAOQ,WAAWC,IAAIJ,EAAKuB,UACxC,GAAIlD,EAAIyB,OAAOE,IAAS3B,EAAIyB,OAAOI,IAAWF,EAAKK,OAAS,EAAG,CAC3D,IAAIQ,EAAOC,SAASC,cAAc,MAC9BC,EAAOF,SAASC,cAAc,MAClCC,EAAKP,MAAMQ,cAAgB,SAC3B,IAAIC,EAAOJ,SAASC,cAAc,MAClCG,EAAKT,MAAMU,YAAc,OACzBD,EAAKT,MAAMQ,cAAgB,SAC3B,IAAIG,EAAON,SAASC,cAAc,MAClCK,EAAKX,MAAMU,YAAc,OACzBC,EAAKX,MAAMQ,cAAgB,SAC3BD,EAAKpB,UAAS,SAAYM,EAAOxB,cACjCwC,EAAKtB,UAAS,+CAAkDI,EAAKtB,oBACrE0C,EAAKxB,UAAS,GAAMI,EAAKK,OAAOG,QAAQ,KACxCK,EAAKQ,OAAOL,EAAME,EAAME,GACxBT,EAASU,OAAOR,IAGxB9B,KAAKyC,YAAYC,gBAAgBd,IAErCtC,EAAIqD,MAAMpC,EAAa,cAAa,w6BAyCxB,kBAERqC,EAAC,WACD5C,KAAK6C,OAAOC,iBAAe,SAAW,KACH,SAA/B9C,KAAQU,KAAMgB,MAACC,QAAgB3B,KAAAU,KAAAgB,MAAAC,QAAA,QACxB3B,KAAAU,KAAAgB,MAAAC,QAAA,aAGFnB,UAAMC,KAAA,SAAwBE,EAAAC,OACnCmC,EAAW,EACXC,EAAU,OAEV,IAAK7B,KAASP,EAAIQ,WAAa6B,SAAA,CAC1B9B,EAAAqB,YAAaQ,IAAaA,EAAA7B,EAAAqB,UAAA,GAC/B,IAAK,IAAAU,KAAO/B,EAAUgC,eAAAC,QAAAC,GACb/D,EAAMyB,OAAKsC,EAAAC,kBAAAD,EAAAC,kBAAA3C,EAAA4C,aAEfP,EAAK7B,EAAUqB,WAAAU,EAAA5B,OAChByB,GAAeG,EAAC5B,mBAGZT,UAAO,GAAQ2C,KAACC,MAAAV,EAAkB,GAAA,aACjC,IAAMlB,sBAEXC,EAAKC,SAAMC,cAAoB,MAC/BC,EAAKF,SAAMC,cAAwB,QACnCN,MAAKQ,cAAe,aACpBC,EAAKJ,SAASC,cAAI,QAClBN,MAAKU,YAAa,SAClBV,MAAAQ,cAAoB,WACpBrB,UAAW,gBACfsB,EAACtB,UAAA,gBACJiB,EAAAQ,OAAAL,EAAAE,GACGP,EAACU,OAAYR,GAEP,IAAC,IAAA4B,KAAAV,EAAA,CACP,IAAI7B,EAAOP,EAASQ,WAAAC,IAAkBqC,GACtC,GAAIpE,EAAIyB,OAAGI,IAAS6B,EAAcU,GAAI,EAAA,CAClC,IAAC5B,EAAMC,SAAaC,cAAW,MAC3BC,EAAGF,SAASC,cAAkB,MAClCC,EAACP,MAAMQ,cAAoB,SAC3B,IAACC,EAAMJ,SAAaC,cAAW,MAC/BG,EAACT,MAASU,YAAI,OACdD,EAACT,MAASQ,cAAiB,SAC3BD,EAACpB,UAAa,GAAIM,EAAAxB,OACtBwC,EAAStB,UAAW,iCAAA2C,KAAAC,MAAAT,EAAAU,GAAA,GAAA,cACvB5B,EAAAQ,OAAAL,EAAAE,GACGP,EAAYU,OAAIR,GAAC9B,KAAA2D,MAAAjC,MAAAC,QAAA,cAGjBc,YAAcC,gBAAad,KACpB,IAACC,sBAGJC,EAAAC,SAAaC,cAAa,MAC7BC,EAAAF,SAAAC,cAAA,MACJC,EAAAP,MAAAQ,cAAA,SACI,IAAIC,EAAKJ,SAAAC,cAAe,MACzBG,EAAIT,MAAMU,YAAU,OACpBD,EAAIT,MAAIQ,cAAkB,WACtBrB,UAAW,kBACXA,UAAW,kBACXyB,OAAKL,EAAME,KACPG,OAAOR,SAEA,WAEX8B,KAAKjD,EAAAkD,SAAa,KAClBnD,EAAKC,EAAOkD,SAAUD,OACtB,IAAArC,KAASb,EAAAc,MAAW,CACpB,IAAIP,EAAOP,EAACc,MAAMD,GACrBN,EAAAuB,YAAAsB,IAAAA,EAAA7C,EAAAuB,UAAA,GACJsB,EAAA7C,EAAAuB,WAAAvB,EAAAK,QAGD,IAAK,IAAIyC,KAAKD,EAAM,CAChB,IAAI3C,EAAOP,EAAMQ,WAAUC,IAAA0C,GAC3B,GAAIzE,EAAAyB,OAAUI,IAAS2C,EAAyBC,GAAA,EAAA,CAChD,IAAQjC,EAAKC,SAAWC,cAAQ,MACxBC,EAAOF,SAAQC,cAAA,MAC1BC,EAAAP,MAAAQ,cAAA,SACI,IAAAC,EAAUJ,SAAAC,cAAwB,MAC1CG,EAAAT,MAAAU,YAAA,OACSD,EAAAT,MAAYQ,cAAgB,SA4B3BD,EAAGpB,UAAA,GAAAM,EAAAxB,OAQbwC,EAAAtB,UAAA,iCAAAiD,EAAAC,GAAAtC,QAAA,YACGK,EAAYQ,OAAQL,EAAKE,GACpBP,EAASU,OAAKR,GACd9B,KAAAgE,OAAatC,MAAOC,QAAA,SAGzB3B,KAAIiE,iBACAvB,gBAAMd,GACVA,EAAW,IAAGC,iBACd,IAAI,IAACqC,KAASvD,EAAMkD,SAAA,CAChB,IAACnD,EAASC,EAAMkD,SAAAK,GACfC,EAAWpC,SAAAqC,YAAA,iBAAG3D,KAAOC,EAAQC,EAAMC,GAAGgB,EAAAU,OAAA6B,GAG3CnE,KAAIqE,UAAK3B,gBAAqBd,YAE1BgB,EAAc,eAAmB,ytCA0DhD","sources":["src/HobbyProj/GTFO/main/enemylist.js"],"sourcesContent":["RHU.import(RHU.module({ trace: new Error(),\n    name: \"Enemy List\", hard: [\"RHU.Macro\", \"RHU.Rest\"],\n    callback: function () {\n        let { RHU } = window.RHU.require(window, this);\n        let GTFOIcons = new Map();\n        if (true) {\n            let img = new Image();\n            img.src = \"./icons/general/checkpoint.png\";\n            GTFOIcons.set(\"checkpoint\", img);\n        }\n        let limbSummary = function () {\n        };\n        limbSummary.prototype.load = function (limb, enemy, report) {\n            this.name.innerHTML = limb.name;\n            this.state.innerHTML = RHU.exists(limb.breaker) ? \"Broken\" : \"Intact\";\n            this.gear.src = RHU.exists(limb.breakerGear) ? `./icons/gear/${limb.breakerGear}.webp` : \"\";\n            if (RHU.exists(limb.breaker)) {\n                let player = report.allPlayers.get(limb.breaker);\n                this.player.innerHTML = RHU.exists(player) ? player.name : \"\";\n            }\n            let damage = 0;\n            for (let g in limb.gears) {\n                let gear = limb.gears[g];\n                damage += gear.damage;\n            }\n            this.damage.innerHTML = `${damage.toFixed(2)}`;\n            if (damage === 0) {\n                this.style.display = \"none\";\n            }\n            let fragment = new DocumentFragment();\n            if (true) {\n                let item = document.createElement(\"tr\");\n                let col0 = document.createElement(\"td\");\n                col0.style.paddingBottom = \"0.5rem\";\n                let col1 = document.createElement(\"td\");\n                col1.style.paddingLeft = \"2rem\";\n                col1.style.paddingBottom = \"0.5rem\";\n                let col2 = document.createElement(\"td\");\n                col2.style.paddingLeft = \"2rem\";\n                col2.style.paddingBottom = \"0.5rem\";\n                col0.innerHTML = `<u>Player</u>`;\n                col1.innerHTML = `<u>Gear</u>`;\n                col2.innerHTML = `<u>Damage</u>`;\n                item.append(col0, col1, col2);\n                fragment.append(item);\n            }\n            for (let g in limb.gears) {\n                let gear = limb.gears[g];\n                let player = report.allPlayers.get(gear.playerID);\n                if (RHU.exists(gear) && RHU.exists(player) && gear.damage > 0) {\n                    let item = document.createElement(\"tr\");\n                    let col0 = document.createElement(\"td\");\n                    col0.style.paddingBottom = \"0.5rem\";\n                    let col1 = document.createElement(\"td\");\n                    col1.style.paddingLeft = \"2rem\";\n                    col1.style.paddingBottom = \"0.5rem\";\n                    let col2 = document.createElement(\"td\");\n                    col2.style.paddingLeft = \"2rem\";\n                    col2.style.paddingBottom = \"0.5rem\";\n                    col0.innerHTML = `<span>${player.name}</span>`;\n                    col1.innerHTML = `<img style=\"width: 4rem;\" src=\"./icons/gear/${gear.name}.webp\"></img>`;\n                    col2.innerHTML = `${gear.damage.toFixed(2)}`;\n                    item.append(col0, col1, col2);\n                    fragment.append(item);\n                }\n            }\n            this.damageTable.replaceChildren(fragment);\n        };\n        RHU.Macro(limbSummary, \"limbSummary\", `\r\n            <h2 rhu-id=\"name\" style=\"padding-top: 2rem; padding-bottom: 1rem;\">Unknown</h2>\r\n            <ul style=\"display: flex; gap: 2.5rem; align-items: center;\">\r\n                <li style=\"display: flex; gap: 1rem;\">\r\n                    Damage <span rhu-id=\"damage\" style=\"color: #e9bc29;\">0</span>\r\n                </li>\r\n                <li style=\"display: flex; gap: 1rem;\">\r\n                    <span rhu-id=\"state\" style=\"\">0</span>\r\n                </li>\r\n                <li style=\"display: flex; gap: 1rem;\">\r\n                    <img rhu-id=\"gear\" style=\"width: 4rem;\"/>\r\n                </li>\r\n                <li style=\"display: flex; gap: 1rem;\">\r\n                    <span rhu-id=\"player\" style=\"color: #e9bc29;\"></span>\r\n                </li>\r\n            </ul>\r\n            <table rhu-id=\"damageTable\" style=\"margin-top: 1rem;\"> <!-- damage, gear, player -->\r\n            </table>\r\n            `, {\n            element: `<li></li>`\n        });\n        let enemySummary = function () {\n            this.toggle.addEventListener(\"click\", () => {\n                if (this.limb.style.display === \"none\") {\n                    this.limb.style.display = \"block\";\n                }\n                else {\n                    this.limb.style.display = \"none\";\n                }\n            });\n        };\n        enemySummary.prototype.load = function (enemy, report) {\n            let totalDamage = 0;\n            let damages = {};\n            for (let player of report.allPlayers.values()) {\n                if (!(player.playerID in damages))\n                    damages[player.playerID] = 0;\n                for (let e of player.damageTimeline.filter((e) => {\n                    return RHU.exists(e.enemyInstanceID) && e.enemyInstanceID === enemy.instanceID;\n                })) {\n                    damages[player.playerID] += e.damage;\n                    totalDamage += e.damage;\n                }\n            }\n            this.damage.innerHTML = `${Math.round(totalDamage / 25 * 100)}`;\n            let fragment = new DocumentFragment();\n            if (true) {\n                let item = document.createElement(\"tr\");\n                let col0 = document.createElement(\"td\");\n                col0.style.paddingBottom = \"0.5rem\";\n                let col1 = document.createElement(\"td\");\n                col1.style.paddingLeft = \"2rem\";\n                col1.style.paddingBottom = \"0.5rem\";\n                col0.innerHTML = `<u>Player</u>`;\n                col1.innerHTML = `<u>Damage</u>`;\n                item.append(col0, col1);\n                fragment.append(item);\n            }\n            for (let p in damages) {\n                let player = report.allPlayers.get(p);\n                if (RHU.exists(player) && damages[p] > 0) {\n                    let item = document.createElement(\"tr\");\n                    let col0 = document.createElement(\"td\");\n                    col0.style.paddingBottom = \"0.5rem\";\n                    let col1 = document.createElement(\"td\");\n                    col1.style.paddingLeft = \"2rem\";\n                    col1.style.paddingBottom = \"0.5rem\";\n                    col0.innerHTML = `${player.name}`;\n                    col1.innerHTML = `<span style=\"color: #e9bc29;\">${Math.round(damages[p] / 25 * 100)}</span>`;\n                    item.append(col0, col1);\n                    fragment.append(item);\n                    this.table.style.display = \"block\";\n                }\n            }\n            this.damageTable.replaceChildren(fragment);\n            fragment = new DocumentFragment();\n            if (true) {\n                let item = document.createElement(\"tr\");\n                let col0 = document.createElement(\"td\");\n                col0.style.paddingBottom = \"0.5rem\";\n                let col1 = document.createElement(\"td\");\n                col1.style.paddingLeft = \"2rem\";\n                col1.style.paddingBottom = \"0.5rem\";\n                col0.innerHTML = `<u>Player</u>`;\n                col1.innerHTML = `<u>Damage</u>`;\n                item.append(col0, col1);\n                fragment.append(item);\n            }\n            let playerDamage = {};\n            for (let l in enemy.limbData) {\n                let limb = enemy.limbData[l];\n                for (let g in limb.gears) {\n                    let gear = limb.gears[g];\n                    if (!(gear.playerID in playerDamage))\n                        playerDamage[gear.playerID] = 0;\n                    playerDamage[gear.playerID] += gear.damage;\n                }\n            }\n            for (let p in playerDamage) {\n                let player = report.allPlayers.get(p);\n                if (RHU.exists(player) && playerDamage[p] > 0) {\n                    let item = document.createElement(\"tr\");\n                    let col0 = document.createElement(\"td\");\n                    col0.style.paddingBottom = \"0.5rem\";\n                    let col1 = document.createElement(\"td\");\n                    col1.style.paddingLeft = \"2rem\";\n                    col1.style.paddingBottom = \"0.5rem\";\n                    col0.innerHTML = `${player.name}`;\n                    col1.innerHTML = `<span style=\"color: #e9bc29;\">${playerDamage[p].toFixed(2)}</span>`;\n                    item.append(col0, col1);\n                    fragment.append(item);\n                    this.table2.style.display = \"block\";\n                }\n            }\n            this.damagetakenTable.replaceChildren(fragment);\n            fragment = new DocumentFragment();\n            for (let l in enemy.limbData) {\n                let limb = enemy.limbData[l];\n                let summary = document.createMacro(\"limbSummary\");\n                summary.load(limb, enemy, report);\n                fragment.append(summary);\n            }\n            this.limbTable.replaceChildren(fragment);\n        };\n        RHU.Macro(enemySummary, \"enemySummary\", `\r\n            <div rhu-id=\"table\" style=\"display: none;\">\r\n                <div style=\"margin-bottom: 1rem\">\r\n                    <ul style=\"display: flex; gap: 2.5rem;\">\r\n                        <li style=\"display: flex; gap: 1rem;\">\r\n                            Damage Dealt <span rhu-id=\"damage\" style=\"color: #e9bc29;\">67.95</span>\r\n                        </li>\r\n                        <li style=\"display: flex; gap: 1rem;\">\r\n                        </li>\r\n                        <li style=\"display: flex; gap: 1rem;\">\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n\r\n                <table rhu-id=\"damageTable\">\r\n                </table>\r\n            </div>\r\n            <div rhu-id=\"table2\" style=\"display: none; margin-top: 2rem;\">\r\n                <h3>Damage taken:</h3>\r\n                <table rhu-id=\"damagetakenTable\" style=\"margin-top: 0.5rem;\">\r\n                </table>\r\n            </div>\r\n            <button rhu-id=\"toggle\" style=\"margin-top: 0.5rem; padding-top: 0.6rem; padding-bottom: 0.6rem; font-size: 17px;\">LIMBS</button>\r\n            <div rhu-id=\"limb\" style=\"display: none;\">\r\n                <ul rhu-id=\"limbTable\">\r\n                </ul>\r\n            </div>\r\n            `, {\n            element: `<div style=\"\r\n                    border-top-style: solid;\r\n                    border-top-width: 1px;\r\n                    border-color: #3b3b3b;\r\n                    grid-column: 1 / 8;\r\n                    margin-top: 1rem;\r\n                    padding-top: 1rem;\r\n                    margin-bottom: 2rem;\"></div>`\n        });\n        let enemyList = function () {\n            this.loaded = false;\n            this.collection = new Map();\n        };\n        enemyList.prototype.load = function (report, filter) {\n            if (this.loaded)\n                return;\n            this.loaded = true;\n            this.report = report;\n            this.report = report;\n            this.enemies = [...report.enemies.values()];\n            if (RHU.exists(filter))\n                this.enemies = this.enemies.filter(filter);\n            if (this.enemies.length > 0) {\n                let fragment = new DocumentFragment();\n                for (let enemy of this.enemies) {\n                    let gear = \"\";\n                    if (!enemy.alive && RHU.exists(enemy.killerGear)) {\n                        gear =\n                            `\r\n                            <img style=\"width: 4rem;\" src=\"./icons/gear/${enemy.killerGear}.webp\"/>\r\n                        `;\n                    }\n                    let f = RHU.Macro.parseDomString(`\r\n                            <div>\r\n                                <img style=\"width: 4rem;\" src=\"./icons/enemies/${enemy.type}.png\"/>\r\n                            </div>\r\n                            <div style=\"\">\r\n                                ${enemy.name}\r\n                            </div>\r\n                            <div style=\"\">\r\n                                ${enemy.type}\r\n                            </div>\r\n                            <div style=\"\">\r\n                                ${enemy.alive ? \"Alive\" : \"Dead\"}\r\n                            </div>\r\n                            <div style=\"color: rgb(200, 173, 98);\">\r\n                                ${enemy.alive ? \"\" : timeToString(enemy.timestamp)}\r\n                            </div>\r\n                            <div>\r\n                                ${gear}\r\n                            </div>\r\n                            <div style=\"\">\r\n                                ${(!enemy.alive && RHU.exists(enemy.killer)) ? (\"<span style='color: #e9bc29;'>\" + report.allPlayers.get(enemy.killer).name + \"</span>\") : \"\"}\r\n                            </div>\r\n                        `);\n                    let el = f.children[0];\n                    this.collection.set(enemy.name, el);\n                    fragment.append(f);\n                    let summary = document.createMacro(\"enemySummary\");\n                    summary.load(enemy, report);\n                    fragment.append(summary);\n                }\n                this.list.replaceChildren(fragment);\n                this.style.display = \"block\";\n            }\n        };\n        enemyList.prototype.goTo = function (name) {\n            if (this.collection.has(name)) {\n                let e = this.collection.get(name);\n                e.scrollIntoView({ behavior: \"smooth\" });\n            }\n        };\n        RHU.Macro(enemyList, \"enemyList\", `\r\n            <div style=\"\r\n                display: grid;\r\n                grid-template-columns: 1fr 1fr 1fr 1fr 1fr 1fr 1fr;\r\n                align-items: center;\r\n            \" rhu-id=\"list\"></div>\r\n            `, {\n            element: `<div style=\"display: none\"></div>`\n        });\n    }\n}));\n"],"names":["RHU","import","module","trace","Error","name","hard","callback","window","require","this","GTFOIcons","Map","img","Image","src","set","limbSummary","prototype","load","limb","enemy","report","innerHTML","state","exists","breaker","gear","breakerGear","player","allPlayers","get","damage","g","gears","toFixed","style","display","fragment","DocumentFragment","item","document","createElement","col0","paddingBottom","col1","paddingLeft","col2","append","g1","playerID","damageTable","replaceChildren","Macro","enemySummary","toggle","addEventListener","totalDamage","damages","values","e1","damageTimeline","filter","e","enemyInstanceID","instanceID","Math","round","p","table","l","limbData","playerDamage","p1","table2","damagetakenTable","l1","summary","createMacro","limbTable"],"version":3,"file":"main.89aa8aef.js.map"}