{"mappings":"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","sources":["src/HobbyProj/GTFO/main/reportmount.js"],"sourcesContent":["let mount;\nRHU.import(RHU.module({ trace: new Error(),\n    name: \"Report\", hard: [\"RHU.Macro\", \"RHU.Rest\"],\n    callback: function () {\n        let { RHU } = window.RHU.require(window, this);\n        let playerSummary = function () {\n        };\n        playerSummary.prototype.load = function (id) {\n            let report = mount.report;\n            let spec = report.spec;\n            let player = report.players.get(id);\n            if (RHU.exists(player.packs[\"Health\"]))\n                this.med.innerHTML = `${player.packs[\"Health\"].length}`;\n            if (RHU.exists(player.packs[\"Ammo\"]))\n                this.ammo.innerHTML = `${player.packs[\"Ammo\"].length}`;\n            if (RHU.exists(player.packs[\"Tool\"]))\n                this.tool.innerHTML = `${player.packs[\"Tool\"].length}`;\n            if (RHU.exists(player.packs[\"Disinfect\"]))\n                this.disinfect.innerHTML = `${player.packs[\"Disinfect\"].length}`;\n            let damageAvoided = 0;\n            let dodges = {};\n            for (let event of player.dodges) {\n                let enemy = report.enemies.get(event.enemyInstanceID);\n                if (!RHU.exists(enemy)) {\n                    console.warn(`Enemy, ${event.enemyInstanceID}, does not exist.`);\n                    continue;\n                }\n                if (enemy.type in dodges)\n                    dodges[enemy.type] += 1;\n                else\n                    dodges[enemy.type] = 1;\n                let dam = spec.enemies[enemy.type].dodgeValue / player.healthMax * 100;\n                damageAvoided += dam;\n            }\n            this.damageAvoided.innerHTML = `${Math.round(damageAvoided)}`;\n            let fragment = new DocumentFragment();\n            if (true) {\n                let row = document.createElement(\"tr\");\n                let col0 = document.createElement(\"td\");\n                col0.style.paddingBottom = \"0.5rem\";\n                let col1 = document.createElement(\"td\");\n                col1.style.paddingBottom = \"0.5rem\";\n                let col2 = document.createElement(\"td\");\n                col2.style.paddingBottom = \"0.5rem\";\n                col0.innerHTML = `<u>Type</u>`;\n                col1.style.paddingLeft = \"2rem\";\n                col1.innerHTML = `<u>Occurence</u>`;\n                col2.style.paddingLeft = \"2rem\";\n                col2.innerHTML = `<u>Avoided</u>`;\n                row.append(col0, col1, col2);\n                fragment.append(row);\n            }\n            for (let type in dodges) {\n                let row = document.createElement(\"tr\");\n                let col0 = document.createElement(\"td\");\n                let col1 = document.createElement(\"td\");\n                let col2 = document.createElement(\"td\");\n                col0.innerHTML = `${type}`;\n                col1.style.paddingLeft = \"2rem\";\n                col1.innerHTML = `${dodges[type]}`;\n                col2.style.paddingLeft = \"2rem\";\n                col2.style.color = \"#e9bc29\";\n                col2.innerHTML = `${Math.round(dodges[type] * spec.enemies[type].dodgeValue / player.healthMax * 100)}`;\n                row.append(col0, col1, col2);\n                fragment.append(row);\n            }\n            this.dodgetable.replaceChildren(fragment);\n            this.timeline.load(player, report);\n            if (damageAvoided > 0)\n                this.dodgetable.style.display = \"block\";\n        };\n        RHU.Macro(playerSummary, \"playerSummary\", `\r\n            <div style=\"margin-bottom: 2rem;\">\r\n                <rhu-macro rhu-id=\"timeline\" rhu-type=\"graph\"></rhu-macro>\r\n            </div>\r\n            <div class=\"margins\">\r\n                <div class=\"margins-wrapper\">\r\n                    <h2 style=\"display: flex; gap: 3rem; align-items: center; margin-bottom: 1rem;\">\r\n                        <span>Resources</span>\r\n                    </h2>\r\n                    <div style=\"margin-bottom: 2rem;\">\r\n                        <ul style=\"display: flex; gap: 2.5rem;\">\r\n                            <li style=\"display: flex; gap: 1rem; align-items: center;\">\r\n                                <img style=\"width: 4rem;\" src=\"./icons/packs/Health.webp\"/>\r\n                                <span rhu-id=\"med\">0</span>\r\n                            </li>\r\n                            <li style=\"display: flex; gap: 1rem; align-items: center;\">\r\n                                <img style=\"width: 4rem;\" src=\"./icons/packs/Ammo.webp\"/>\r\n                                <span rhu-id=\"ammo\">0</span>\r\n                            </li>\r\n                            <li style=\"display: flex; gap: 1rem; align-items: center;\">\r\n                                <img style=\"width: 4rem;\" src=\"./icons/packs/Tool.webp\"/>\r\n                                <span rhu-id=\"tool\">0</span>\r\n                            </li>\r\n                            <li style=\"display: flex; gap: 1rem; align-items: center;\">\r\n                                <img style=\"width: 4rem;\" src=\"./icons/packs/Disinfect.webp\"/>\r\n                                <span rhu-id=\"disinfect\">0</span>\r\n                            </li>\r\n                        </ul>\r\n                    </div>\r\n                    <h2 style=\"display: flex; gap: 3rem; align-items: center; margin-bottom: 1rem;\">\r\n                        <span>Dodges</span>\r\n                    </h2>\r\n                    <div style=\"display: flex;\">\r\n                        <div style=\"flex: 0.7; padding-right: 1.5rem;\">\r\n                            <div style=\"margin-bottom: 1rem\">\r\n                                <ul style=\"display: flex; gap: 2.5rem;\">\r\n                                    <li style=\"flex: 1; display: flex; gap: 1rem;\">\r\n                                        Damage Avoided <span style=\"color: #e9bc29;\" rhu-id=\"damageAvoided\">0</span>\r\n                                    </li>\r\n                                </ul>\r\n                            </div>\r\n                            <table rhu-id=\"dodgetable\" style=\"display: none;\">\r\n                            </table>\r\n                        </div>\r\n                        <div style=\"flex: 1; padding-left: 2rem;\">\r\n                            <!-- TODO -->\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            `, {\n            element: `<div></div>`\n        });\n        let gearRecap = function () {\n        };\n        gearRecap.prototype.load = function (id, gearID) {\n            let report = mount.report;\n            let player = report.players.get(id);\n            let gear = player.gears[gearID];\n            this.name.innerHTML = gearID;\n            this.img.src = `./icons/gear/${gearID}.webp`;\n            let kills = report.getPlayerGearKills(id, gearID);\n            let total = 0;\n            let fragment = new DocumentFragment();\n            if (true) {\n                let row = document.createElement(\"tr\");\n                let col0 = document.createElement(\"td\");\n                col0.style.paddingBottom = \"0.5rem\";\n                let col1 = document.createElement(\"td\");\n                col1.style.paddingBottom = \"0.5rem\";\n                col0.innerHTML = `<u>Type</u>`;\n                col1.style.paddingLeft = \"2rem\";\n                col1.innerHTML = `<u>Kills</u>`;\n                row.append(col0, col1);\n                fragment.append(row);\n            }\n            for (let type in kills) {\n                total += kills[type];\n                let row = document.createElement(\"tr\");\n                let col0 = document.createElement(\"td\");\n                let col1 = document.createElement(\"td\");\n                col0.innerHTML = type;\n                col1.style.paddingLeft = \"2rem\";\n                col1.innerHTML = kills[type].toString();\n                row.append(col0, col1);\n                fragment.append(row);\n            }\n            this.killtable.replaceChildren(fragment);\n            if (RHU.exists(gear.mines)) {\n                let mineInstance = document.createElement(\"ul\");\n                let mines = [];\n                for (let mine in gear.mines)\n                    mines.push(gear.mines[mine]);\n                mines.sort((a, b) => b.timestamp - a.timestamp);\n                for (let mine of mines) {\n                    let item = document.createElement(\"li\");\n                    item.style.marginTop = \"1rem\";\n                    item.style.display = \"flex\";\n                    item.style.gap = \"2rem\";\n                    let wrapper = document.createElement(\"div\");\n                    let icon = document.createElement(\"img\");\n                    icon.style.width = \"2rem\";\n                    if (gear.name !== \"Krieger O4\")\n                        icon.src = \"./icons/consumables/mine.webp\";\n                    else\n                        icon.src = \"./icons/consumables/mine.png\";\n                    wrapper.append(icon);\n                    item.append(wrapper);\n                    let table = document.createElement(\"table\");\n                    let kills = {};\n                    for (let id of mine.enemies.values()) {\n                        let enemy = report.enemies.get(id);\n                        if (enemy.type in kills)\n                            kills[enemy.type] += 1;\n                        else\n                            kills[enemy.type] = 1;\n                    }\n                    let fragment = new DocumentFragment();\n                    if (true) {\n                        let row = document.createElement(\"tr\");\n                        let col0 = document.createElement(\"td\");\n                        col0.style.paddingBottom = \"0.5rem\";\n                        let col1 = document.createElement(\"td\");\n                        col1.style.paddingBottom = \"0.5rem\";\n                        col0.innerHTML = `<u>Type</u>`;\n                        col1.style.paddingLeft = \"2rem\";\n                        col1.innerHTML = `<u>Kills</u>`;\n                        row.append(col0, col1);\n                        fragment.append(row);\n                    }\n                    for (let type in kills) {\n                        let row = document.createElement(\"tr\");\n                        let col0 = document.createElement(\"td\");\n                        let col1 = document.createElement(\"td\");\n                        col0.innerHTML = type;\n                        col1.style.paddingLeft = \"2rem\";\n                        col1.innerHTML = kills[type].toString();\n                        row.append(col0, col1);\n                        fragment.append(row);\n                    }\n                    table.replaceChildren(fragment);\n                    item.append(table);\n                    mineInstance.append(item);\n                }\n                this.instances.replaceChildren();\n                this.instances.append(mineInstance);\n                if (mines.length > 0)\n                    this.instances.style.display = \"block\";\n            }\n            this.damage.innerHTML = `${gear.damage.toFixed(2)}`;\n            this.kills.innerHTML = `${total}`;\n            this.assists.innerHTML = `${[...gear.enemies.values()].filter((i) => {\n                let e = report.enemies.get(i);\n                return RHU.exists(e) && !e.alive && RHU.exists(e.killer) && e.killer !== player.playerID;\n            }).length}`;\n            if (total > 0)\n                this.body.style.display = \"block\";\n        };\n        RHU.Macro(gearRecap, \"gearRecap\", `\r\n            <div class=\"margins\">\r\n                <div class=\"margins-wrapper\">\r\n                    <h2 style=\"display: flex; gap: 3rem; align-items: center; margin-bottom: 1rem;\">\r\n                        <img rhu-id=\"img\" style=\"height: 4rem;\" src=\"\"/>\r\n                        <span rhu-id=\"name\">UNKNOWN</span>\r\n                    </h2>\r\n                    <div style=\"display: flex;\">\r\n                        <div style=\"padding-right: 1.5rem;\">\r\n                            <div style=\"margin-bottom: 1rem\">\r\n                                <ul style=\"display: flex; gap: 2.5rem;\">\r\n                                    <li style=\"display: flex; gap: 1rem;\">\r\n                                        Damage <span style=\"color: #e9bc29;\" rhu-id=\"damage\">0</span>\r\n                                    </li>\r\n                                    <li style=\"display: flex; gap: 1rem;\">\r\n                                        Kills <span rhu-id=\"kills\">0</span>\r\n                                    </li>\r\n                                    <li style=\"display: flex; gap: 1rem;\">\r\n                                        Assists <span rhu-id=\"assists\">0</span>\r\n                                    </li>\r\n                                </ul>\r\n                            </div>\r\n                            <div rhu-id=\"body\" style=\"display: none;\">\r\n                                <table rhu-id=\"killtable\">\r\n                                </table>\r\n                                <div rhu-id=\"instances\">\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            `, {\n            element: `<li></li>`\n        });\n        let playerInfoFull = function () {\n        };\n        playerInfoFull.prototype.load = function (id) {\n            let report = mount.report;\n            let player = report.allPlayers.get(id);\n            if (!RHU.exists(player))\n                return;\n            this.name.innerHTML = player.name;\n            this.body.style.display = \"block\";\n            this.summary.load(player.playerID);\n            let loadout = report.getLoadout(player.playerID);\n            if (RHU.exists(loadout.main)) {\n                let recap = document.createMacro(\"gearRecap\");\n                this.gears.append(recap);\n                recap.load(player.playerID, loadout.main.publicName);\n            }\n            if (RHU.exists(loadout.secondary)) {\n                let recap = document.createMacro(\"gearRecap\");\n                this.gears.append(recap);\n                recap.load(player.playerID, loadout.secondary.publicName);\n            }\n            if (RHU.exists(loadout.tool)) {\n                let recap = document.createMacro(\"gearRecap\");\n                this.gears.append(recap);\n                recap.load(player.playerID, loadout.tool.publicName);\n            }\n            if (RHU.exists(loadout.melee)) {\n                let recap = document.createMacro(\"gearRecap\");\n                this.gears.append(recap);\n                recap.load(player.playerID, loadout.melee.publicName);\n            }\n        };\n        RHU.Macro(playerInfoFull, \"playerInfoFull\", `\r\n            <div class=\"margins\">\r\n                <div class=\"margins-wrapper\">\r\n                    <h1 rhu-id=\"name\" style=\"padding-top: 2rem; font-family: Share Tech Mono; font-weight: 800;\">DISCONNECTED</h1>\r\n                </div>\r\n            </div>\r\n            <div rhu-id=\"body\" style=\"display: none;\">\r\n                <rhu-macro rhu-id=\"summary\" rhu-type=\"playerSummary\">\r\n                    <!-- player summary -->\r\n                    <!-- key achievements -->\r\n                </rhu-macro>\r\n                <ul rhu-id=\"gears\" style=\"display: flex; flex-direction: column; gap: 1rem; margin-top: 2rem;\">\r\n                    <!-- gear recap -->\r\n                </ul>\r\n                <div style=\"margin-top: 2rem;\">\r\n                    <!-- TODO(randomuserhi) -->\r\n                    <!-- damage taken timeline -->\r\n                    <!-- health timeline -->\r\n                    <!-- packs timeline -->\r\n                </div>\r\n                <div style=\"margin-top: 2rem;\">\r\n                    <!-- TODO(randomuserhi) -->\r\n                    <!-- all achievements -->\r\n                </div>\r\n            </div>\r\n            `, {\n            element: `<div></div>`\n        });\n        let playerInfo = function () {\n            this.loaded = false;\n            const self = this;\n            this.full = document.createMacro(\"playerInfoFull\");\n            this.addEventListener(\"click\", function () {\n                self.panel.footer.replaceChildren(self.full);\n                self.panel.resize();\n                self.full.scrollIntoView({ behavior: \"smooth\" });\n                requestAnimationFrame(() => {\n                    self.full.summary.timeline.render();\n                });\n            });\n        };\n        playerInfo.prototype.load = function (player) {\n            if (this.loaded)\n                return;\n            this.loaded = true;\n            this.disconnected.style.display = \"none\";\n            this.body.style.display = \"block\";\n            this.name.innerHTML = player.name;\n            let report = mount.report;\n            let loadout = report.getLoadout(player.playerID);\n            if (RHU.exists(loadout.main)) {\n                this.main.innerHTML = loadout.main.publicName;\n                this.mainImg.src = `./icons/gear/${loadout.main.publicName}.webp`;\n            }\n            if (RHU.exists(loadout.secondary)) {\n                this.secondary.innerHTML = loadout.secondary.publicName;\n                this.secondaryImg.src = `./icons/gear/${loadout.secondary.publicName}.webp`;\n            }\n            if (RHU.exists(loadout.tool)) {\n                this.tool.innerHTML = loadout.tool.publicName;\n                this.toolImg.src = `./icons/gear/${loadout.tool.publicName}.webp`;\n            }\n            if (RHU.exists(loadout.melee)) {\n                this.melee.innerHTML = loadout.melee.publicName;\n                this.meleeImg.src = `./icons/gear/${loadout.melee.publicName}.webp`;\n            }\n            let list = report.getAchievements(player.playerID);\n            for (let i = 0; i < list.length && i < 4; ++i) {\n                let item = document.createElement(\"li\");\n                let icon = document.createElement(\"img\");\n                icon.src = `./icons/achievements/${list[i].type}.png`;\n                icon.style.width = \"5rem\";\n                icon.style.padding = \"0.5rem\";\n                item.append(icon);\n                item.addEventListener(\"mouseover\", () => {\n                    if (RHU.exists(achievements[list[i].type])) {\n                        this.achievementName.innerHTML = achievements[list[i].type].name;\n                        this.achievementAlt.innerHTML = achievements[list[i].type].alt;\n                        this.achievementAlt.append(RHU.Macro.parseDomString(`<div style=\"font-family: 'Share Tech Mono'; text-align: center;\">${list[i].text}</div>`));\n                    }\n                    else {\n                        this.achievementName.innerHTML = \"Unknown\";\n                        this.achievementAlt.innerHTML = \"Unknown\";\n                    }\n                });\n                this.achievements.append(item);\n            }\n            this.full.load(player.playerID);\n        };\n        RHU.Macro(playerInfo, \"playerInfo\", `\r\n            <div style=\"display: block; padding: 1rem; color: #e11900\" rhu-id=\"disconnected\">\r\n                DISCONNECTED\r\n            </div>\r\n            <div style=\"display: none;\" rhu-id=\"body\">\r\n                <ul rhu-id=\"slotList\" class=\"player-info-loadout\" style=\"display: flex; flex-direction: column;\">\r\n                    <li style=\"padding: 0;\">\r\n                        <button rhu-id=\"name\" style=\"width: 100%; --color: #dadad1;\"></button>\r\n                    </li>\r\n                    <li style=\"position: relative;\">\r\n                        <ul class=\"achievement\" rhu-id=\"achievements\" style=\"display: flex; padding-top: 0.5rem;\">\r\n                        </ul>\r\n                        <div class=\"achievements\">\r\n                            <h3 rhu-id=\"achievementName\" style=\"\r\n                                font-family: 'Share Tech Mono';\r\n                                margin-bottom: 0.4rem;\r\n                            \"></h3>\r\n                            <span rhu-id=\"achievementAlt\" style=\"font-family: 'Share Tech Mono'; text-align: center; display: flex; flex-direction: column; align-items: center; justify-content: center; gap: 0.5rem;\"></span>\r\n                        </div>\r\n                    </li>\r\n                    <li>\r\n                        <div rhu-id=\"main\"></div>\r\n                        <div style=\"flex:1\"></div>\r\n                        <img rhu-id=\"mainImg\"src=\"\"/>\r\n                    </li>\r\n                    <li>\r\n                        <div rhu-id=\"secondary\"></div>\r\n                        <div style=\"flex:1\"></div>\r\n                        <img rhu-id=\"secondaryImg\"src=\"\"/>\r\n                    </li>\r\n                    <li>\r\n                        <div rhu-id=\"tool\"></div>\r\n                        <div style=\"flex:1\"></div>\r\n                        <img rhu-id=\"toolImg\"src=\"\"/>\r\n                    </li>\r\n                    <li>\r\n                        <div rhu-id=\"melee\"></div>\r\n                        <div style=\"flex:1\"></div>\r\n                        <img rhu-id=\"meleeImg\" src=\"\"/>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n            `, {\n            element: `<div class=\"player-info\"></div>`\n        });\n        let playerPanelFooter = function () {\n        };\n        RHU.Macro(playerPanelFooter, \"playerPanelFooter\", `\r\n            \r\n            `, {\n            element: `<div style=\"width: 100%; flex: 1; background-color: black; padding: 4rem; padding-top: 14rem;\"></div>`\n        });\n        let playerPanel = function () {\n            const self = this;\n            this.footer = document.createMacro(\"playerPanelFooter\");\n            this.footer.panel = this;\n            this.slots = [this.slot0, this.slot1, this.slot2, this.slot3];\n            for (let slot of this.slots) {\n                slot.panel = this;\n            }\n            this.resize = function () {\n                let computed = getComputedStyle(self.slot0);\n                let computedSlot = getComputedStyle(self.slot0.slotList);\n                self.footer.style.paddingTop = `calc(${parseInt(computedSlot.height) - parseInt(computed.height)}px + 4rem)`;\n            };\n            window.addEventListener(\"resize\", this.resize);\n        };\n        playerPanel.prototype.reset = function () {\n            this.vid.play();\n            mount.body.append(this.footer);\n            if (!RHU.exists(mount.report))\n                return;\n            let slotIdx = 0;\n            for (let player of mount.report.players.values())\n                this.slots[slotIdx++].load(player);\n        };\n        RHU.Macro(playerPanel, \"playerPanel\", `\r\n            <div style=\"position: relative; width: 100%; aspect-ratio: 2.25;/*max-height: 400px;*/\">\r\n                <video rhu-id=\"vid\" class=\"player-video\" autoplay loop playsinline disablepictureinpicture poster=\"https://storage.googleapis.com/gtfo-prod-v1/lobby_test_2_00000_a4b0da3c99/lobby_test_2_00000_a4b0da3c99.jpg\">\r\n                    <source src=\"https://storage.googleapis.com/gtfo-prod-v1/lobby_FIX_8cbec4587d/lobby_FIX_8cbec4587d.mp4\" type=\"video/mp4\">\r\n                </video>\r\n                <div style=\"position: relative; height: 100%; aspect-ratio: 2.25; margin: auto;\">\r\n                    <rhu-macro rhu-id=\"slot0\" style=\"top: 40%; left: 15%;\" rhu-type=\"playerInfo\"></rhu-macro>\r\n                    <rhu-macro rhu-id=\"slot1\" style=\"top: 40%; left: 37%;\" rhu-type=\"playerInfo\"></rhu-macro>\r\n                    <rhu-macro rhu-id=\"slot2\" style=\"top: 40%; left: 59%;\" rhu-type=\"playerInfo\"></rhu-macro>\r\n                    <rhu-macro rhu-id=\"slot3\"style=\"top: 40%; left: 80%;\" rhu-type=\"playerInfo\"></rhu-macro>\r\n                </div>\r\n            </div>\r\n            `, {\n            element: `<div style=\"display: flex; flex-direction: column; height: 100%; width: 100%; position: relative;\" class=\"\"></div>`\n        });\n        let enemyPanel = function () {\n        };\n        enemyPanel.prototype.reset = function () {\n            if (!RHU.exists(mount.report))\n                return;\n            this.list.load(mount.report);\n        };\n        RHU.Macro(enemyPanel, \"enemyPanel\", `\r\n            <div class=\"margins-wrapper\">\r\n                <rhu-macro rhu-id=\"list\" rhu-type=\"enemyList\"></rhu-macro>\r\n            </div>\r\n            `, {\n            element: `<div class=\"margins\"></div>`\n        });\n        let reportmount = function () {\n            mount = this;\n            const self = this;\n            this.view = \"players\";\n            this.report = null;\n            this.navbar = [\n                {\n                    btn: this.playersBtn,\n                    panel: document.createMacro(\"playerPanel\")\n                },\n                {\n                    btn: this.enemiesBtn,\n                    panel: document.createMacro(\"enemyPanel\")\n                }\n            ];\n            let navbar = this.navbar;\n            for (let { btn, panel } of navbar) {\n                btn.onclick = function () {\n                    for (let { btn } of navbar) {\n                        btn.classList.toggle(\"selected\", false);\n                    }\n                    btn.classList.toggle(\"selected\", true);\n                    self.body.replaceChildren(panel);\n                    requestAnimationFrame(() => { panel.reset(); });\n                };\n            }\n            navbar[0].btn.click();\n        };\n        reportmount.prototype.open = function (report) {\n            this.report = report;\n        };\n        RHU.Macro(reportmount, \"report\", `\r\n            <!-- navbar -->\r\n            <ul class=\"report-navbar\">\r\n                <li class=\"selected\" rhu-id=\"playersBtn\">\r\n                    <a>Players</a>\r\n                </li>\r\n                <li rhu-id=\"enemiesBtn\">\r\n                    <a>Enemies</a>\r\n                </li>\r\n            </ul>\r\n            <div class=\"report-body\" rhu-id=\"body\">\r\n            </div>\r\n            `, {\n            element: `<div class=\"report-mount\"></div>`\n        });\n    }\n}));\n"],"names":["mount","RHU","import","module","trace","Error","name","hard","callback","window","require","this","playerSummary","prototype","load","id","report","spec","player","players","get","exists","packs","med","innerHTML","length","ammo","tool","disinfect","damageAvoided","dodges","event","enemy","enemies","enemyInstanceID","type","dodgeValue","healthMax","console","warn","Math","round","fragment","DocumentFragment","row","document","createElement","col0","style","paddingBottom","col1","col2","paddingLeft","append","color","dodgetable","replaceChildren","timeline","display","Macro","gearID","gears","getPlayerGearKills","kills","toString","gear","mines","mineInstance","mine","push","sort","a","b","timestamp","mine1","item","marginTop","gap","wrapper","icon","width","src","table","values","instances","damage","toFixed","total","assists","i","e","alive","killer","playerID","body","gearRecap","allPlayers","summary","loadout","getLoadout","main","recap","createMacro","publicName","secondary","melee","playerInfoFull","element","playerInfo","loaded","self","full","addEventListener","panel","footer","resize","scrollIntoView","behavior","render","disconnected","mainImg","secondaryImg"],"version":3,"file":"main.6253683c.js.map"}